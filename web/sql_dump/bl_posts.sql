-- phpMyAdmin SQL Dump
-- version 4.4.15.5
-- http://www.phpmyadmin.net
--
-- Host: 127.0.0.1:3306
-- Generation Time: Mar 21, 2017 at 10:13 
-- Server version: 5.5.48-log
-- PHP Version: 5.6.19

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `yii2_db`
--

-- --------------------------------------------------------

--
-- Table structure for table `bl_posts`
--

CREATE TABLE IF NOT EXISTS `bl_posts` (
  `id` int(10) unsigned NOT NULL,
  `is_release` tinyint(1) unsigned NOT NULL,
  `category` enum('News','Android','PHP','Java','Books','Web','Windows') NOT NULL,
  `title` varchar(255) NOT NULL,
  `img` varchar(255) NOT NULL,
  `intro_text` text NOT NULL,
  `full_text` text NOT NULL,
  `date` int(10) unsigned DEFAULT NULL,
  `meta_desc` varchar(255) NOT NULL,
  `meta_key` varchar(255) NOT NULL,
  `hits` int(10) unsigned NOT NULL,
  `hide` tinyint(1) unsigned NOT NULL,
  `no_form` tinyint(1) unsigned NOT NULL
) ENGINE=MyISAM AUTO_INCREMENT=12 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `bl_posts`
--

INSERT INTO `bl_posts` (`id`, `is_release`, `category`, `title`, `img`, `intro_text`, `full_text`, `date`, `meta_desc`, `meta_key`, `hits`, `hide`, `no_form`) VALUES
(1, 1, 'Java', 'Тестовый 1', 'test1.jpg', 'Анонс первого тестового поста.', '<h2>Первый пост.</h2>\r\n\r\n<p>Детальный разбор выдуманной проблемы.Детальный разбор выдуманной проблемы.Детальный разбор выдуманной проблемы.Детальный разбор выдуманной проблемы.Детальный разбор выдуманной проблемы.Детальный разбор выдуманной проблемы.Детальный разбор выдуманной проблемы.Детальный разбор выдуманной проблемы.Детальный разбор выдуманной проблемы.Детальный разбор выдуманной проблемы.Детальный разбор выдуманной проблемы.Детальный разбор выдуманной проблемы.Детальный разбор выдуманной проблемы.Детальный разбор выдуманной проблемы.Детальный разбор выдуманной проблемы.Детальный разбор выдуманной проблемы.Детальный разбор выдуманной проблемы.Детальный разбор выдуманной проблемы.Детальный разбор выдуманной проблемы.</p>\r\n\r\n<ol>\r\n	<li>Делаем</li>\r\n	<li>вид</li>\r\n	<li>умственной</li>\r\n	<li>деятельности</li>\r\n	<li>на</li>\r\n	<li>как</li>\r\n	<li>можно</li>\r\n	<li>больше</li>\r\n	<li>строчек</li>\r\n	<li>текста.</li>\r\n</ol>\r\n\r\n<h1>Вывод</h1>\r\n\r\n<p><code>не утешительный, строчек не так много.</code></p>\r\n', 1485946482, 'Пример мета описания.', 'Пример мета ключей.', 89, 0, 0),
(2, 1, 'Java', 'Тестовый 2', 'test2.jpg', 'Анонс второго тестового поста. Анонс второго тестового поста.(copy1) Анонс второго тестового поста.(copy2)', '<ol>\r\n	<li>Второй пост.</li>\r\n	<li>Детальный разбор реальной проблемы.</li>\r\n	<li>Мы, знаем, что умственной деятельности на долго не хватит.</li>\r\n	<li>Вывод все тот же не утешительный, строчек не так много.</li>\r\n</ol>\r\n', 1485960781, 'Пример мета описания2.', 'Пример мета ключей2.', 8, 0, 0),
(3, 1, 'Books', 'Тестовый 3', 'test3.jpg', 'Анонс третьего тестового поста. Анонс третьего тестового поста(copy1). Анонс третьего тестового поста. (copy2)', '<p>Третий пост. Детальный разбор мифической проблемы. Мы, знаем, что умственной деятельности не существует. Выводы будем делать в следующем посту.</p>\r\n', 1485960712, 'Пример мета описания3.', 'Пример мета ключей3.', 9, 0, 0),
(4, 1, 'Books', 'Тестовый 4', 'test5.jpg', 'Анонс четвертого тестового поста.', '<p>Четвертый пост. Поверхностный разбор крошечной проблемы. Мы, ничего не знаем, и знать не можем. Выводы в таком случае делать очень легко.</p>\r\n', 1486025653, 'Пример мета описания4.', 'Пример мета ключей4.', 2, 0, 0),
(5, 1, 'Android', 'Тестовый 5', 'test4.jpg', 'Анонс 5 тестового поста. Анонс 5 тестового поста.Анонс 5 тестового поста.Анонс 5 тестового поста.Анонс 5 тестового поста.Анонс 5 тестового поста.', '<p>5 пост. Поверхностный разбор крошечной проблемы. Мы, ничего не знаем, и знать не можем. Выводы в таком случае делать очень легко.</p>\r\n', 1485960826, 'Пример мета описания5.', 'Пример мета ключей5.', 35, 0, 0),
(6, 1, 'News', 'Тестовый 6', 'test3.jpg', 'Анонс 6 тестового поста.', '<p>6 пост. Детальный разбор мифической проблемы. Мы, знаем, что умственной деятельности не существует. Выводы будем делать в следующем посту.</p>\r\n', 1, 'Пример мета описания6.', 'Пример мета ключей6.', 34, 0, 0),
(7, 1, 'Books', 'Тестовый скрытый 1', 'test5.jpg', 'Скрытый пост, не должен отобразится.', '<h1>Скрытый</h1>\r\n\r\n<ul>\r\n	<li>Скрытый пост, не должен отобразится.</li>\r\n	<li>Скрытый пост, не должен отобразится.</li>\r\n	<li>Скрытый пост, не должен отобразится.</li>\r\n	<li>Скрытый пост, не должен отобразится.</li>\r\n</ul>\r\n', 1485962853, 'Скрытый ', 'Скрытый ', 1, 1, 0),
(8, 0, 'Web', 'Elegant Selects with Quick[select]', 'quickselect.png', 'Элементы форм всегда разрешали использование ограниченные возможности стилей... поэтому я ненавижу работу с формами. Конечно мы прошли долгий путь, но существует один элемент формы к которому до сих пор довольно трудно применить стили и не элегантно: SELECT. Этот элемент выглядит по разному от одной операционной системы к другой, а иногда даже от браузера к браузеру.', '<p>Original - https://davidwalsh.name/quick-select</p>\r\n\r\n<p>Недавно я нашел чудесную jQuery плагин, который делает&nbsp;<code>SELECT</code> элемент более&nbsp;презентабельным, элегантным и стильным:&nbsp;<big><tt>Quick[select].</tt></big></p>\r\n\r\n<p>Quick[select] превращает варианты&nbsp;<code>SELECTа в кликабельные кнопки с традиционным &nbsp;SELECTом как выпадающим списком.</code></p>\r\n\r\n<h2>The CSS</h2>\r\n\r\n<p>Quick[select] идет вместе с базовым набором стилей, но вы может&nbsp;изменить стили &quot;кнопок&quot; в любые варианты какие вы захотите, как вы можете увидеть в моем демо. Вот мои основные стили:</p>\r\n\r\n<pre>\r\n<code>.btn-group .btn {\r\n	border: 1px solid #ccc;\r\n	background: #eee;\r\n	padding: 4px;\r\n	border-radius: 4px;\r\n	margin: 0 10px 0 0;\r\n	font-size: 14px;\r\n	display: inline;\r\n\r\n	transition: background .3s, border-color .3s;\r\n}\r\n.btn-group .btn.active {\r\n	background: #7ac9ed;\r\n	border-color: #0c7bb6;\r\n}</code></pre>\r\n\r\n<p>Quick[select] также имеет помощника для bootsrap сайтов, если это ваш стек.</p>\r\n\r\n<h2>The JavaScript</h2>\r\n\r\n<p>Использовать Quick[select] легко: добавить плагин на страницу, а затем использовать синтаксис jQuery для создания экземпляров SELECT элементов:</p>\r\n\r\n<pre>\r\n<code>jQuery(&#39;#wakeup-time&#39;).quickselect({\r\n	activeButtonClass: &#39;btn-primary active&#39;,\r\n	breakOutValues: [&#39;06:30&#39;, &#39;07:00&#39;, &#39;07:30&#39;, &#39;08:00&#39;],\r\n	buttonClass: &#39;btn btn-default&#39;,\r\n	selectDefaultText: &#39;Other&#39;,\r\n	wrapperClass: &#39;btn-group&#39;\r\n});</code>\r\n</pre>\r\n\r\n<p>Самый важный параметр breakOutValues который генерирует интерактивные кнопки для популярных вариантов (указанные Вами) внутри элемента SELECT. Вы также захотите установить кастомное значение &quot;selectDefaultText&quot;, когда кнопка выбрана, она&nbsp;запускает полный показ всех существующих вариантов.</p>\r\n\r\n<p>Quick[select] is the best&nbsp;<code>SELECT</code>&nbsp;alternative that I&#39;ve seen in a long time. &nbsp;This plugin&nbsp;allows for elegant, stylish, and usable&nbsp;<code>SELECT</code>&nbsp;elements. &nbsp;Go check it out and do your users a favor!</p>\r\n\r\n<p>Quick[select] является лучшей альтернативой SELECT, что я видел в течение длительного времени. Этот плагин позволяет делать&nbsp;элегантные, стильные&nbsp;и пригодные&nbsp;для использования <code>SELECT</code>&nbsp;элементы. Проверить его и сделай своим пользователям услугу!</p>\r\n', 1486561963, 'modified select form with help jQuery plagin Quick[select].', 'quickselect, select, css, form, jQuery', 46, 0, 0),
(9, 1, 'Web', 'How to Learn Angular', 'angular.png', 'AngularJS (также известный как Angular) является мощным инструментом фронтенд-разработки для построения сложных JavaScript приложений. Хотя обучение Angular будет очень полезным, я уверен, многие попытки разобраться в Angular, преследовали свои страхи перед этим фреймворком, и угасали в зародыше из-за ужасающе пугающей и сложной Angular docs.', '<p><a href="http://sixrevisions.com/javascript/learn-angular/">How to Learn Angular(original)</a></p>\r\n\r\n<p>AngularJS (также известный как Angular) является мощным инструментом фронтенд-разработки для построения сложных JavaScript приложений. Хотя обучение Angular будет очень полезным, я уверен, многие попытки разобраться в Angular, преследовали свои страхи перед этим фреймворком, и угасали в зародыше из-за ужасающе пугающей и сложной Angular docs.</p>\r\n\r\n<p>Это позор, потому что Angular может&nbsp;так много нам предложить:</p>\r\n\r\n<ul>\r\n	<li>Модульность, что позволяет команде разработчиков работать&nbsp;над разными частями приложения одновременно</li>\r\n	<li>Тестируемость и ремонтопригодность различных частей вашего приложения</li>\r\n	<li>Большое, развивающиеся сообщество разработчиков и организаций, которые любят Angular</li>\r\n	<li>Четкое разделение пользовательского интерфейса приложений от его логики, в то же время сохраняя их в связи между собой</li>\r\n	<li>Двусторонние&nbsp;связывание&nbsp;данных - это чистая магия (или колдовство?) - обновляет интерфейс всякий раз, когда изменяется &nbsp;модель (и наоборот)</li>\r\n	<li>Полезный, новенький&nbsp;(а также сторонние разработки) модули, такие как фильтры и услуги, которые принимают сложности из материала как для обработки данных, шаблонам MVC, имея дело с HTTP-запросов, дезинфицирующим и проверки данных, вводимых пользователем , анимация, и больше</li>\r\n</ul>\r\n\r\n<p>И это только верхушка айсберга!</p>\r\n\r\n<p>Если вы решили изучить Angular, вы получите&nbsp;навыки, необходимые&nbsp;для разработки кросс-платформенных приложений, и ваши новообретенные суперсилы окажутся полезными и прибыльным на долгие годы.</p>\r\n\r\n<p>Ниже приводится руководство (я называю его дорожной&nbsp;картой), которое поможет&nbsp;вам изучить эффективно Angular. Моя цель состоит в том, чтобы с этой дорожной картой &nbsp;наметить Вам осмысленный учебный план основанный на бесплатных онлайн ресурсах, которые постепенно введут&nbsp;вас в мир Angular. Я хотел создать гид для самообучения, который&nbsp;будет мотивировать вас постигать более высокие уровни Angular.</p>\r\n\r\n<p>По окончании данного учебного руководства, вы сможете смотреть вперед имея понимание&nbsp;Angular и возможность использовать его для создания приложений JavaScript.</p>\r\n\r\n<p>Я не собираюсь лгать, обучение Angular будет тяжелой работой. Ожидайте сталкиваться со многими тупиками во время этого трудного дела. Но я призываю вас придерживаться плана. Ваши усилия и с трудом заработанные&nbsp;боевые шрамы будут оценены, потому что Angular принесет разнообразие&nbsp;в вашу работу и пополнит ваш список&nbsp;навыков.</p>\r\n\r\n<p>Вы готовы? Давайте начнем!</p>\r\n\r\n<h2>Во-первых, вам нужно знать JavaScript</h2>\r\n\r\n<p>Использование Angular фактически требует, чтобы вы понимали основы JavaScript.</p>\r\n\r\n<p>Более того, количество знаний которые вы почерпнете&nbsp;из Angular будет пропорционально тому, как хорошо вы знаете JavaScript.</p>\r\n\r\n<p>Я не рекомендую обучения Angular по крайней мере без базового понимания JavaScript. Задача будет, мягко говоря, в 100 раз&nbsp;сложнее, если вы не знаете JavaScript.</p>\r\n\r\n<p>Другие фреймворки веб-разработки немного более снисходительными по отношению к людям, которые не имеют твердого понимания&nbsp;JavaScript. Например, jQuery скрывает некотрые&nbsp;сложные&nbsp;концепций JavaScript от&nbsp;своих пользователей. Это не плохо, на самом деле это отлично подходит для многих разработчиков и некоторых видов проектов в области развития.</p>\r\n\r\n<p>(Чтобы еще больше подчеркнуть мое предыдущее рассуждение, jQuery был построен с использованием шаблона проектирования &quot;Фасад&quot;, известныq&nbsp;JavaScript разработчик&nbsp;и инженер&nbsp;Google Адди Османи в своей книге дает определение ему&nbsp;как шаблону, который &quot;обеспечивает удобный интерфейс более высокого уровня к более сложному коду, скрывая свою истинную сложность.&quot;)</p>\r\n\r\n<p>Angular, в отличие от этого, выставляет мощный и элегантный - но часто труднопонятные/неправельно использозованные функции JavaScript. Angular не уклоняется от сложностей в JavaScript;&nbsp;он охватывает их и запихивает их в свои пределы.</p>\r\n\r\n<p>Если вам нужно узнать или освежить знания JavaScript, начните с этих статей:</p>\r\n\r\n<ul>\r\n	<li><a href="http://sixrevisions.com/javascript/learning-javascript-for-free/">A Roadmap to Learning JavaScript for Free</a></li>\r\n	<li><a href="http://sixrevisions.com/javascript/free-javascript-books/">10 Free JavaScript Books</a></li>\r\n	<li><a href="http://sixrevisions.com/javascript/interactive-javascript-tutorials/">Interactive JavaScript Tutorials</a></li>\r\n</ul>\r\n\r\n<p>Нет худа без добра. Вспоминая мое собственное путешествие в мир Angular, я могу с уверенностью сказать, что это помогло мне стать лучшим программистом JavaScript. Использование Angular побудило меня к дальнейшему пониманию&nbsp;передовых концепций JavaScript, методов и шаблонов проектирования.</p>\r\n\r\n<p>Не мудрствуя лукаво, вот мой план к изучению Angular.</p>\r\n\r\n<h2>A Roadmap to Learning Angular</h2>\r\n\r\n<p>Вот пятиступенчатый процесс обучения Angular с использованием бесплатных онлайн ресурсов.</p>\r\n\r\n<p>Я использовал эти ресурсы, чтобы получить хороший уровень понимания Angular. Я признаю, что мне еще предстоит&nbsp;пройти долгий путь, но эти ресурсы помогли мне начать работу в правильном направлении.</p>\r\n\r\n<p>Если вы хотите, вы можете начать с ресурсов, которые вы лично найдете интересными. Однако, имейте в виду, что я намеренно структурировал это руководство с целью помочь вам плавно получить необходимые знания. Используя неправильный ресурс не в то время, и вы можете утратить энтузиазм&nbsp;продолжать&nbsp;изучать Angular.</p>\r\n\r\n<h2>Step 1:<a href="https://www.codeschool.com/courses/shaping-up-with-angular-js">Shaping up with Angular.js</a></h2>\r\n\r\n<p><img alt="" src="http://cdn.sixrevisions.com/0596-01-shaping-up-angular.jpg" style="height:396px; width:640px" /></p>\r\n\r\n<p>Цель: получить плавное&nbsp;и&nbsp;практическое&nbsp;введение в мир Angular.</p>\r\n\r\n<p>Всякий раз, когда я пытаюсь что-то узнать, моя первоначальная цель состоит в том, чтобы получить вид с высоты птичьего полета на вещь, которую я пытаюсь изучить, и получить практический опыт работы с ней как можно быстрее. Я хочу избежать настройки и конфигурации. Есть две причины для этой цели. Во-первых, так я могу решить для себя, является ли это потенциально полезным умением, что бы изучать его, при этом не подвергая слишком много времени на него. Вторая причина, сразу вижу работающий код, что часто делает задачу более привлекательной, веселой и мотивирующей.</p>\r\n\r\n<p><em>Shaping up with Angular.js</em> - бесплатный видео курс, спонсируемый Google, который разработал и поддерживает&nbsp;Angular - отвечает всем требованиям.</p>\r\n\r\n<p>Этот интерактивный курс хорошо структурированный&nbsp;и является эффективным&nbsp;введением в Angular. В этом курсе вы будете строить простое приложение Angular. Есть испытания кодирования чередующиеся на протяжении всего курса, чтобы помочь вам проанализировать полученные знания, ключевые концепции обсуждаются. При разработке приложения, вы узнаете о некоторых мощных функций Angular, таких как директив, двухсторонняя связывания данных, услуги и так далее.</p>\r\n\r\n<h2>Step 2:&nbsp;<a href="http://www.angularjsbook.com/angular-basics/chapters/introduction/">Angular Basics by ScriptyBooks</a></h2>\r\n\r\n<p><img alt="" src="http://cdn.sixrevisions.com/0596-02-angular-basics.jpg" style="height:387px; width:640px" /></p>\r\n\r\n<p><strong>Цель: </strong>узнать об основных понятиях и особенностей Angular.</p>\r\n\r\n<p>Официальные AngularJS учебные пособия и документация (которые мы обсудим позже) является чрезвычайно подробным и тщательным. Для меня проблема с официальными документами это невероятно сухая&nbsp;и пугающая подача информации. Это особенно непривлекательно&nbsp;для людей, как я, которые не имеют формального академического образования&nbsp;в области информатики.</p>\r\n\r\n<p>Я понимаю необходимость подробной и обстоятельной&nbsp;документации проекта. Будучи всеобъемлющим и технической документацей, они обходят стороной проблемы неоднозначности и позволяют&nbsp;своим пользователям найти всю необходимую им информацию.</p>\r\n\r\n<p>Но для большинства людей, я считаю, что обучение Angular&nbsp;должно начинаться с содержанием третьей стороной. Есть другие учебные ресурсы&nbsp;которые являются более доступными для новичков.</p>\r\n\r\n<p>Бесплатная онлайн-книга <em>Angular Basics</em> является одним из таких учебных ресурсов.</p>\r\n\r\n<p>Крис Смит, автор книги, прекрасно описывает мой первый опыт, пытаясь узнать Angular через документацию AngularJS:</p>\r\n\r\n<blockquote>\r\n<p>&quot;После копания в [Angular&nbsp;] API и его документации, я понял, что мой прогресс остановился на незнакомой лексике, которые включали такие термины, как включение, директивы, и изолировать scope. Как я прочитал в официальной документации и учебнике, перспектива легкого изучения, казалось, отступила в туман.&quot;</p>\r\n\r\n<p><cite><a href="http://www.angularjsbook.com/angular-basics/chapters/">Angular Basics &ndash; Introduction chapter</a></cite></p>\r\n</blockquote>\r\n\r\n<p>В Angular Basics, вы узнаете о жизненно важных Angular понятий: контроллеры, директив, услуг, scope, инъекции зависимостей, и так далее. Эта книга является интерактивным, - пока вы читаете эту книгу, вам будет предложено поиграть с примерами кода, что делает ее приятной и интересной для чтения.</p>\r\n\r\n<p>Это он-лайн книга не будет идти через каждую Angular функцию. Автор вместо капитулирует свою книгу принципа Парето: &quot;Дает вам доступ к большой мощности Angular, в то время как обременяя вас только&nbsp;малой части своей сложности.&quot;</p>\r\n\r\n<p>Следующие три шага будут иметь дело с полнотой и лучшими практиками Angular.</p>\r\n\r\n<h2>Step 3:&nbsp;<a href="https://docs.angularjs.org/tutorial">AngularJS PhoneCat Tutorial App</a></h2>\r\n\r\n<p><img alt="" src="http://cdn.sixrevisions.com/0596-03-angular-phonecat-tutorial.jpg" style="height:388px; width:640px" /></p>\r\n\r\n<p><strong>Цель:</strong> научиться создавать Angular приложения.</p>\r\n\r\n<p>После прохождения первых двух ресурсов,&nbsp;вы будете хорошо подготовлены к разработке Angular приложений.</p>\r\n\r\n<p>Ничто не сравнится с официальной документации Angular с точки зрения полноты. По-моему, вы просто не можете правильно &nbsp;изучить&nbsp;Angular, не тратя время на официальную документацию.</p>\r\n\r\n<p>В <em>PhoneCat Tutorial App,</em> вы будете создавать каталог смартфонов. Вы узнаете, Angular понятия среднего и продвинутого уровня такие, как модульного тестирования, E2E тестов, как организовать ваши приложения файлы и каталоги, шаблонами, лучшие практики для модульности кода вашего приложения, и многое другое.</p>\r\n\r\n<p>Не торопитесь с этим руководством. Боритесь с желанием проскочить&nbsp;вперед всякий раз, когда вы достигли некого&nbsp;чекпоинта. (Я столкнулся со многими из них, когда я прошел через этот учебник.) Пройдя через тяжести этого урока, вы гарантируете себе истинное понимание Angular.</p>\r\n\r\n<p>Автор учебника <em>PhoneCat App</em> говорит, что &quot;вы можете пройти через весь учебник в течение нескольких часов или вы можете провести приятный день действительно копаться в нем.&quot; У меня это заняло неделю, вкладывая в два часа целенаправленного обучения каждый день.</p>\r\n\r\n<h2>Step 4:&nbsp;<a href="https://docs.angularjs.org/guide">AngularJS Developer Guide</a></h2>\r\n\r\n<p><img alt="" src="http://cdn.sixrevisions.com/0596-04-angular-developer-guide.jpg" style="height:393px; width:640px" /></p>\r\n\r\n<p><strong>Цель:</strong>&nbsp;получить глубокое понимание основополагающих концепций, особенностей и терминологий Angular.</p>\r\n\r\n<p>На данный момент, вы должны уже быть хорошо оснащены знаниями&nbsp;Angular. Теперь пришло время, чтобы копать глубже в детали. The official&nbsp;<em>AngularJS Developer Guide</em>&nbsp;- ваша следующая остановка.</p>\r\n\r\n<p>The&nbsp;<em>AngularJS Developer Guide</em> погрузит в мельчайшие особенности&nbsp;и возможности&nbsp;Angular. Многие Angular&nbsp;новички, вероятно, начинали с этим руководством (или PhoneCat учебник), и это, возможно, оттолкнуло их продолжать изучать Angular&nbsp;из-за сложной манеры подачи знаний. Но после предыдущих шагов, вы должны теперь быть более уверенными в использовании данного руководства.</p>\r\n\r\n<p>В этом руководстве вы узнаете (или будете направлены в нужную сторону) все вещи, что вам нужно знать о Angular. Руководство охватывает такие вещи, как провайдеров, декораторы, интерполяция, безопасность, доступность, запуск Angular в продакшн и т.д.</p>\r\n\r\n<p>Мой совет с этим руководством такой же который я дал вам для PhoneCat урока: &quot;Не спешите. Боритесь с желанием пропустить разделы&quot;.</p>\r\n\r\n<h2>Step 5:&nbsp;<a href="https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md">Angular Style Guide by John Papa</a></h2>\r\n\r\n<p><img alt="" src="http://cdn.sixrevisions.com/0596-05-angular-style-guide.png" style="height:397px; width:640px" /></p>\r\n\r\n<p><strong>Цель: </strong>изучить лучшие практики Angular:&nbsp;как писать, организовывать и структурировать свой код таким образом, что он был&nbsp;ремонтопригодным и проверяемым.</p>\r\n\r\n<p>Мы можем многому научиться, читая <strong>сoding style guides</strong>, даже если мы в конечном итоге не используем их в наших проектах. <strong>Сoding style guides&nbsp;</strong>является самоуверенным документация руководств и наилучшей практики для получения читабельного, кода высокого качества.</p>\r\n\r\n<p>Есть несколько прекрасных Angular style guides, но на этот раз следует обратить особое внимание, потому что она одобрена командой Angular.</p>\r\n\r\n<p>Этот Angular style guide был рассмотрен Игорь Минар, команды ведущего углового и инженером-программистом в Google.</p>\r\n\r\n<p><em>Angular Style Guide&nbsp;</em>исповедует широкий спектр лучших Angular (и JavaScript) практик, таких как:</p>\r\n\r\n<ul>\r\n	<li>Принцип&nbsp;единственной ответственности&nbsp;ваших компонентов</li>\r\n	<li>Использование IIFE разделить на модули scope&nbsp;вашего&nbsp;JavaScript</li>\r\n	<li>Как написать свои директивы, контроллеры, модули, услуги&nbsp;и т.д. в читаемом, проверяемой и обслуживаемой способом</li>\r\n	<li>Соглашения об именах</li>\r\n	<li>Как комментировать свой код</li>\r\n	<li>Настройки для JS Hint (проверка качества кода) для эффективной работы с Angular</li>\r\n</ul>\r\n\r\n<p>После прочтения этого руководства по стилю, я предлагаю выбрать один из следующих четырех направлений деятельности:</p>\r\n\r\n<ol>\r\n	<li>Примените этот стиль руководства как есть в ваших Angular проектах.</li>\r\n	<li>А затем изменить его, чтобы он&nbsp;выстраивался с вашими личными стилями и философией.</li>\r\n	<li>Ищите альтернативный style guide, такие как у&nbsp;<a href="https://github.com/toddmotto/angular-styleguide">Angular 1.x styleguide</a> созданный уважаемым Google разработчиком и экспертом, Todd Motto.</li>\r\n	<li>Создайте свой собственный Angular style guide.</li>\r\n</ol>\r\n\r\n<p>В любом случае, прежде чем работать над крупным Angular приложением, важно иметь набор лучших практик, которые укажут&nbsp;путь к завершению проекта и обеспечат высокого&nbsp;качества код&nbsp;. В противном случае, ваши Angular приложения быстро запутаются и их будет трудно поддерживать.</p>\r\n', 1487236037, 'AngularJS tutorial guide of free online resources', 'AngularJS tutorial JS guide learn', 39, 0, 0),
(10, 1, 'Java', 'GoF Design Patterns Using Java (Part 1)', 'java-dp-part-1.png', 'Шаблоны проектирования банды четырех сродни легенде, так что давайте рассмотрим некоторые примеры Observer (наблюдатель), Factory (фабрика), Command(команда), Singleton(одиночка), Decorator(декоратор), и Factory Patterns(шаблонов фабрик).', '<p><a href="https://dzone.com/articles/gof-design-patterns-using-java-part-1">Original post</a></p>\r\n\r\n<p>Я придумал со своими собственными примерами, чтобы понять шаблоны проектирования дальше. Попробуйте скачать код и посмотреть, если это поможет вам в осмыслении модели в лучшую сторону. Некоторые краткие фрагменты кода следуют друг за образец, так что вы можете получить быстрые демонстрации. Не стесняйтесь закладки эту статью в качестве краткой справки / шпаргалку для того, когда вы хотите быстро просмотреть каждый из них. Не мудрствуя лукаво, давайте окунемся в шаблон Observer.</p>\r\n\r\n<h2><strong>Observer Pattern</strong></h2>\r\n\r\n<p>Шаблон Observer, как следует из названия, используется в случаях, когда обновления должны быть сделаны в нескольких точках (Observers) в зависимости от изменения состояния в другое место (Subject). Каждый из наблюдателей должен зарегистрировать себя с Обьектом, в индивидуальном порядке. Обьектидолжен также располагать методами, которые позволят наблюдателям удалить себя. Зарегистрированные наблюдатели сообщают об изменениях в состоянии через метод уведомления. Как правило.</p>\r\n\r\n<p>Предоставленный примером является приложением <strong>Stockbroker</strong>, которое включает в себя различные виды финансовой информации. <strong>Обьект&nbsp;</strong>представляет собой интерфейс в приложении, которое обеспечивает шаблон для наблюдаемого класса. <strong>StockData </strong>является конкретной реализацией обьекта и обеспечивает реализацию для <em>addObserver(), removeObserver() и notifyObservers()</em>. Кроме того, он поддерживает список зарегистрированных наблюдателей. <em>IncomeHandler, InvestmentHandler и&nbsp;PortfolioHandler</em> включает в себя различные наблюдатели, используемые для поддержания доходов, инвестиций, и портфель конкретного <strong>Stockbroker</strong>. Все они зависят от постоянно меняющихся значений запасов. Они непосредственно заинтересованы в stockSymbol, stockValue и stockUnits каждого отдельного запаса. Каждый из наблюдателей реализует интерфейс наблюдателя. Интерфейс <strong>Observer </strong>предоставляет метод<em> Update()</em>, который реализуется каждым из этих конкретных классов.</p>\r\n\r\n<p>Только концепция сердечника в приведенных ниже фрагментах. Вы можете скачать образец кода для полного кода / приложения.</p>\r\n\r\n<p>//------------------------------------------------------</p>\r\n\r\n<pre>\r\n<code>package com.sumsoft.design.patterns.observer;\r\npublic interface Observer { &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;\r\n&nbsp;&nbsp; &nbsp;public void update(String stockSymbol, Float stockValue, Integer stockUnits);\r\n}</code></pre>\r\n\r\n<pre>\r\n<code>package com.sumsoft.design.patterns.observer;\r\n\r\npublic class IncomeHandler implements Observer {\r\n&nbsp; &nbsp; Subject stockData = null;\r\n&nbsp;&nbsp; &nbsp;\r\n&nbsp; &nbsp; public IncomeHandler(Subject stockData) { &nbsp; &nbsp; &nbsp; &nbsp;\r\n &nbsp; &nbsp; &nbsp; &nbsp;this.stockData = stockData; &nbsp; &nbsp; &nbsp; &nbsp;\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;stockData.addObserver(this); &nbsp; &nbsp;\r\n&nbsp;&nbsp; &nbsp;}\r\n&nbsp; &nbsp; @Override &nbsp; &nbsp;\r\n&nbsp;&nbsp; &nbsp;public void update(String stockSymbol, Float stockValue, Integer stockUnits) { &nbsp; &nbsp; &nbsp; &nbsp;\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;System.out.println(&quot;IncomeHandler received changes... &quot;); &nbsp; &nbsp;\r\n&nbsp; &nbsp; }\r\n}</code></pre>\r\n\r\n<pre>\r\n<code>package com.sumsoft.design.patterns.observer;\r\n\r\n\r\npublic interface Subject { &nbsp; &nbsp; \r\n    public void addObserver(Observer o); &nbsp; &nbsp; \r\n    public void removeObserver(Observer o); &nbsp; &nbsp; \r\n    public void notifyObservers();\r\n}</code></pre>\r\n\r\n<pre>\r\n<code>package com.sumsoft.design.patterns.observer;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class StockData implements Subject {\r\n    private String stockSymbol = null;\r\n    private Float stockValue = null;\r\n    private Integer stockUnits = null;\r\n    private List observers = null;\r\n    public StockData() {\r\n        observers = new ArrayList();\r\n    }\r\n    @Override\r\n    public void addObserver(Observer o) {\r\n        observers.add(o);\r\n    }\r\n    @Override\r\n    public void notifyObservers() {\r\n        for(Observer o: observers) {\r\n            o.update(stockSymbol, stockValue, stockUnits);\r\n        }\r\n    }\r\n    @Override\r\n    public void removeObserver(Observer o) {\r\n        observers.remove(o);\r\n    }\r\n    public void setStockData(String stockSymbol, Float stockValue, Integer stockUnits) {\r\n        // In real-time, this method might be invoked with values from a live web service at regular intervals.\r\n        this.stockSymbol = stockSymbol;\r\n        this.stockValue = stockValue;\r\n        this.stockUnits = stockUnits;\r\n        setDataChanged();\r\n    }\r\n    private void setDataChanged() {\r\n        notifyObservers();\r\n    }\r\n}</code></pre>\r\n\r\n<p>Используйте StockBroker.java для запуска приложения. Попробуйте добавить свой собственный наблюдатель к этому приложению. Кроме того, вы можете попробовать поднять эти значения из живого веб-сервиса и написать пользовательского наблюдателя, который зависит от него.</p>\r\n\r\n<h2><strong>Decorator Pattern</strong></h2>\r\n\r\n<p>Not edited!!!!!!</p>\r\n\r\n<p>Декоратор предоставляет элегантный способ использования композиции для усиления функциональности, где результат ожидается имеет прямую зависимость от сочинял и сочинял класса. Цепь соотношение (с помощью композиции) или украшения можно, наконец, использовать для достижения желаемых результатов во время выполнения программы. В режиме реального времени, когда функциональность одного конкретного продукта, как ожидается, будет построен из базового продукта и различных других связанных субпродуктов или светильников, мы можем положиться на декоратора.</p>\r\n\r\n<p>Прилагаемый примером является приложение Pizza. Здесь, пицц в цехе производятся с различными комбинациями оснований и долива комбинаций. Это классический пример, чтобы использовать декоратор на. Пицца это абстрактный базовый класс для каждой из пиццы оснований для реализации и ToppingDecorator еще один абстрактный класс, который наследует от Pizza для каждого из начинок для реализации. Гавайский, итальянский и мексиканский являются конкретные реализации пиццы, в то время как грибы, лук, и курица являются конкретные реализации ToppingDecorator. Каждый из этих начинок инкапсулирует экземпляр Pizza. Этот экземпляр, во время выполнения, проведет еще один долива или пицца базового экземпляра. И, наконец, когда стоимость должна быть рассчитана на всей пиццы, что реальное значение декоратор видно и только один вызов достаточно вычислить всю стоимость счета.</p>\r\n\r\n<p>Только концепция сердечника в приведенных ниже фрагментах. Вы можете скачать образец кода для полного кода / приложения.</p>\r\n', 1487667018, 'GOF''s design patterns in Java', 'design patterns, java, gof, gang of four,', 41, 0, 0);
INSERT INTO `bl_posts` (`id`, `is_release`, `category`, `title`, `img`, `intro_text`, `full_text`, `date`, `meta_desc`, `meta_key`, `hits`, `hide`, `no_form`) VALUES
(11, 1, 'Web', '10 Node.js Best Practices', '10-nodejs.png', 'Лучшие 10 Node.js практики: Просветление от гуру NodeJS - автор Азат Мардан. Цель статьи - познакомить вас с контентом от известных писателей и докладчиков веб-сообщества.', '<p>В этой статье рассказывается о 10 лучших методах, которые помогут вам перевести свои навыки в Node на следующий уровень.&nbsp;</p>\r\n\r\n<p>Вот что мы собираемся осветить:</p>\r\n\r\n<ol>\r\n	<li><a href="#scripts-npm">Use npm scripts</a>&nbsp;- перестать писать скрипты bash, если вы можете лучше их организовать с помощью сценариев npm и Node. Например, <code><strong>npm run</strong> <strong>build</strong></code>,&nbsp;<strong><code>start</code>&nbsp;</strong>и&nbsp;<strong><code>test</code></strong>. Npm scripts&nbsp;- это единственный источник истины, когда разработчики Node смотрят на новый проект.</li>\r\n	<li><a href="#env-vars">Use env vars</a>&nbsp;-&nbsp;Используйте&nbsp;<strong>process.env.NODE_ENV</strong>, установив его в <strong>development</strong>, или <strong>production</strong>. Некоторые frameworks&nbsp;также используют эту переменную, поэтому соблюдайте соглашения.</li>\r\n	<li><a href="#event-loop">Understand the event loop</a>&nbsp;-&nbsp;<strong>setImmediate() </strong>не является немедленным, в то время как <strong>nextTick()</strong> не является следующим. Используйте s<strong>etImmediate()</strong> или <strong>setTimeout()</strong>, чтобы перегрузить задачи, требующие интенсивного использования процессора, на следующий цикл событий.</li>\r\n	<li><a href="#func-inheritance">Use functional inheritance</a>&nbsp;-&nbsp;Избегайте попадания в бессмысленные дебаты и ловушку для мозгов, отлаживая и понимая прототипическое наследование или классы, просто используя функциональное наследование, как это делают некоторые из наиболее продуктивных участников Node.</li>\r\n	<li><a href="#name-appropriately">Name things appropriately</a>&nbsp;-&nbsp;Дайте содержательные имена, которые будут служить документацией. Кроме того, просьба не указывать имена файлов верхнего регистра, при необходимости используйте дефис. Заглавные буквы в именах файлов не просто выглядят странно, но могут вызывать межплатформенные проблемы.</li>\r\n	<li><a href="#not-using-js">Consider NOT Using JavaScript</a>&nbsp;-&nbsp;<strong>ES6/7</strong> - жалкое дополнение, которое родилось из 6 лет встреч, когда у нас уже был улучшенный <strong>JavaScript </strong>под названием <strong>CoffeeScript</strong>. Используйте его, если вы хотите ускорить код и прекратить тратить время на обсуждение аргументов var / const / let, полуколоний, классов и других аргументов.</li>\r\n	<li><a href="#not-using-js">Provide native code</a>&nbsp;-&nbsp;При использовании транспиляторов передайте собственный JS-код (результат построения), чтобы ваши проекты могли работать без сборок.</li>\r\n	<li><a href="#know-middleware">Use gzip</a>&nbsp;- Duh! n<em>pm i compression -S</em> и нормальное ведение журнала - не слишком много, чтобыслабо&nbsp;зависить&nbsp;от окружения. <strong>npm i morgan -S.</strong></li>\r\n	<li><a href="#scale-up">Scale up</a>&nbsp;- Начните думать о кластеризации и предоставлении услуг без учета состояния с первого дня разработки вашего <strong>NodeJS</strong>. Используйте <strong>pm2 </strong>или&nbsp;управление кластерами <strong>strongloop.</strong></li>\r\n	<li><a href="#cache-req">Cache requests</a>&nbsp;-&nbsp;получение максимального количества возможностей из серверов Node, скрывая их за статическим файловым сервером, таким как nginx и / или кэшем уровня запросов, например <strong>Varnish Cache</strong> и кешированием <strong>CDN</strong>.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Итак, давайте рассмотрим каждый из них по отдельности.</p>\r\n\r\n<h2><a id="scripts-npm" name="scripts-npm">Use npm Scripts</a></h2>\r\n\r\n<p>Это почти стандарт для создания скриптов npm для сборки, тестов и, самое главное, для запуска приложения. Это первое место, на которое разработчики Node смотрят, когда они сталкиваются с новым проектом Node. Некоторые люди (1, 2, 3, 4) даже угробили Grunt, Gulp и им подобных за более низкоуровневый, но более надежный скрипт npm. Я могу полностью понять их аргументы. Учитывая, что скрипты npm имеют pre и post hooks, вы можете перейти на очень сложный уровень автоматизации:</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px"><code>&quot;scripts&quot;: {<br />\r\n&nbsp; &quot;preinstall&quot;: &quot;node prepare.js&quot;,<br />\r\n&nbsp; &quot;postintall&quot;: &quot;node clean.js&quot;,<br />\r\n&nbsp; &quot;build&quot;: &quot;webpack&quot;,<br />\r\n&nbsp; &quot;postbuild&quot;: &quot;node index.js&quot;,<br />\r\n&nbsp; &quot;postversion&quot;: &quot;npm publish&quot;<br />\r\n}</code></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Часто, когда вы разрабатываете для front-end, вы хотите запустить два или более процесса наблюдения, чтобы перестроить ваш код. Например, один для webpack, другой для nodemon. Вы можете сделать это с помощью &amp;&amp;, поскольку первая команда не выдаст приглашение. Тем не менее, есть удобный модуль, называемый <a href="https://www.npmjs.com/package/concurrently">concurrently</a>, который может порождать несколько процессов и запускать их одновременно.</p>\r\n\r\n<p>Кроме того, локально устанавливайте инструменты командной строки dev, такие как webpack, nodemon, gulp, Mocha и т. д., Чтобы избежать конфликтов. Например, вы можете указать на ./node_modules/.bin/mocha или добавить эту строку в ваш профиль bash / zsh (PATH!):</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px"><code>export PATH=&quot;./node_modules/.bin:$PATH&quot;</code></div>\r\n\r\n<h2><a name="env-vars">Use Env Vars&nbsp;</a></h2>\r\n\r\n<p>Используйте переменные среды даже на ранних этапах проекта, чтобы гарантировать отсутствие утечки конфиденциальной информации и просто для правильного создания кода с самого начала. Более того, некоторые библиотеки и платформы (я знаю, Express делает это наверняка) будет тянуть в информации, как NODE_ENV, чтобы изменить их поведение. Установите его на production. Установите значения MONGO_URI и API_KEY. Вы можете создать файл оболочки (например, start.sh) и добавить его в .gitignore:</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px"><code>NODE_ENV=production MONGO_URL=mongo://localhost:27017/accounts API_KEY=lolz nodemon index.js</code></div>\r\n\r\n<p>У Nodemon также есть файл конфигурации, в котором вы можете поместить свои env vars (<a href="https://github.com/remy/nodemon/blob/master/doc/sample-nodemon.md">пример</a>):&nbsp;</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px"><code>{<br />\r\n&nbsp; &quot;env&quot;: {<br />\r\n&nbsp;&nbsp;&nbsp; &quot;NODE_ENV&quot;: &quot;production&quot;,<br />\r\n&nbsp;&nbsp;&nbsp; &quot;MONGO_URL&quot;: &quot;mongo://localhost:27017/accounts&quot;<br />\r\n&nbsp; }<br />\r\n}</code></div>\r\n\r\n<h2><a id="event-loop" name="event-loop">Understand the Event Loop&nbsp;</a></h2>\r\n\r\n<p>Мощный и умный цикл событий - это то, что делает Node настолько быстрым и блестящим, используя все время, которое было бы потрачено впустую, ожидая завершения задач ввода и вывода. Таким образом, Node отлично подходит для оптимизации систем ввода-вывода.</p>\r\n\r\n<p>Если вам нужно выполнить что-то интенсивное с использованием процессора (например, вычисление, хэширование паролей или сжатие), тогда помимо порождения новых процессов для этих CPU-задач вам может понадобиться изучить отсрочку выполнения задачи с помощью <strong>setImmediate(</strong>) или <strong>setTimeout()</strong> - код в своих обратных вызовах будет продолжаться в следующем цикле цикла событий. <strong>NextTick()</strong> работает в одном цикле вопреки названию. Арг!<br />\r\n&nbsp;</p>\r\n\r\n<p>Вот диаграмма от Берта Белдера, который работал над циклом событий. Он четко знает, как работает цикл событий!</p>\r\n\r\n<p><img alt="" src="https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2016/12/1482781486event-loop-1.jpg" /></p>\r\n\r\n<h2><a id="func-inheritance" name="func-inheritance">Use Functional Inheritance</a></h2>\r\n\r\n<p>JavaScript поддерживает прототипическое наследование, когда объекты наследуют от других объектов. Оператор класса также был добавлен к языку с ES6. Однако он слишком сложный по сравнению с функциональным наследованием. Большинство NodeJS гуру предпочитают простоту последнего. Он реализуется простой фабричной структурой функций и НЕ требует использования <strong><code>prototype</code></strong>,&nbsp;<strong><code>new</code>&nbsp;</strong>или&nbsp;<strong><code>this</code></strong>. При обновлении прототипа неявных эффектов (в результате чего все экземпляры также изменяются), поскольку в функциональном наследовании каждый объект использует свою собственную копию методов.</p>\r\n\r\n<p>Рассмотрим код от TJ Holowaychuk, плодовитого гения за Express, Mocha, Connect, Superagent и десятки других модулей Node. Express использует функциональное наследование (<a href="https://github.com/expressjs/express/blob/master/lib/express.js">полный исходный код</a>):</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px"><code>exports = module.exports = createApplication;<br />\r\n// ...<br />\r\nfunction createApplication() {<br />\r\n&nbsp; var app = function(req, res, next) {<br />\r\n&nbsp;&nbsp;&nbsp; app.handle(req, res, next);<br />\r\n&nbsp; };</code></div>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">&nbsp; mixin(app, EventEmitter.prototype, false);<br />\r\n&nbsp; mixin(app, proto, false);</div>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">&nbsp; app.request = { __proto__: req, app: app };<br />\r\n&nbsp; app.response = { __proto__: res, app: app };<br />\r\n&nbsp; app.init();<br />\r\n&nbsp; return app;<br />\r\n}</div>\r\n\r\n<p>Чтобы быть объективным, core Node modules многократно используют прототипическое наследование. Если вы следуете этому образцу, убедитесь, что знаете, как это работает. <a href="http://davidshariff.com/blog/javascript-inheritance-patterns/">Здесь</a>&nbsp;вы можете подробнее узнать о шаблонах наследования JavaScript.&nbsp;</p>\r\n\r\n<h2><a name="name-appropriately">Name Things Appropriately</a></h2>\r\n\r\n<p>Это очевидно. Хорошие имена служат документацией. Какой бы вы предпочли?</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px"><code>const dexter = require(&#39;morgan&#39;)<br />\r\n// ...<br />\r\napp.use(dexter(&#39;dev&#39;)) // When is the next season?</code></div>\r\n\r\n<p>Я не знаю, что делает dexter, когда я смотрю только на app.use (). Как насчет другого более значимого имени:&nbsp;</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px"><code>const logger = require(&#39;morgan&#39;)<br />\r\n// ...<br />\r\napp.use(logger(&#39;dev&#39;)) // Aha!</code></div>\r\n\r\n<p>Точно так же имена файлов должны правильно отражать смылс кода внутри. Если вы посмотрите на папку lib проекта NodeJS&nbsp;(<a href="https://github.com/nodejs/node/tree/master/lib">ссылка GitHub</a>), в котором есть все основные модули, связанные с этой платформой, то вы увидите ясное обозначение файлов/модулей (даже если вы не очень хорошо знакомы со всеми основными модулями):</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px"><code>events.js<br />\r\nfs.js<br />\r\nhttp.js<br />\r\nhttps.js<br />\r\nmodule.js<br />\r\nnet.js<br />\r\nos.js<br />\r\npath.js<br />\r\nprocess.js<br />\r\npunycode.js<br />\r\nquerystring.js</code></div>\r\n\r\n<p>Внутренние модули помечены подчеркиванием (<strong>_debugger.js, _http_agent.js, _http_client.js</strong>), как и методы и переменные в коде. Это помогает предупредить разработчиков о том, что это внутренний интерфейс, и если вы используете его, вы по своему усмотрению - не жалуйтесь, если он будет реорганизован или даже удален.</p>\r\n\r\n<h2><a id="not-using-js" name="not-using-js">Consider NOT Using JavaScript&nbsp;</a></h2>\r\n\r\n<p>А? Вы только что прочитали это правильно? Но какого черта? Да. Правильно. Даже с ES6 и двумя функциями, добавленными ES2016/ES7, JavaScript все еще имеет свои особенности. Есть и другие варианты, кроме JavaScript, которые вы или ваша команда может извлечь из этого, с минимальной настройкой. В зависимости от уровня знаний и характера приложения вам может быть лучше с помощью TypeScript или Flow, которые обеспечивают строгую типизацию. На другом конце спектра есть Elm или ClojureScript, которые являются чисто функциональными. CoffeeScript - еще один отличный и проверенный временем вариант. Вы также можете взглянуть на Dart 2.0.</p>\r\n\r\n<p>Когда вам нужно всего несколько макросов (макросы позволяют вам создать именно тот язык, который вам нужен), а не весь новый язык, а затем рассмотрите Sweet.js, который сделает именно это - позволит вам написать код, который генерирует код.</p>\r\n\r\n<p>Если вы идете по маршруту, отличному от JavaScript, пожалуйста, включите скомпилированный код, потому что некоторые разработчики могут не понимать ваш язык достаточно хорошо, чтобы правильно его построить. Например, VS code&nbsp;является одним из крупнейших проектов TypeScript, может быть, после Angular 2&nbsp;и&nbsp;Code использует TypeScript для исправления базового модуля Node с типами. В <strong>vscode /src/vs/base/node/</strong> репозитория VS Code (<a href="https://github.com/Microsoft/vscode/tree/master/src/vs/base/node">ссылка</a>) вы можете увидеть знакомые имена модулей, такие как <strong>crypto, process</strong> и т. д., но с расширением <strong>ts</strong>. В репо есть другие <strong>ts</strong>-файлы. Тем не менее, они также включали <strong>vscode/build</strong> с нативным JavaScript-кодом.</p>\r\n\r\n<h2><a id="know-middleware" name="know-middleware">Know Express Middleware</a></h2>\r\n\r\n<p>Express - отличная и очень зрелая структура. Это блеск достигается благодаря тому, что мириады других модулей могут настраивать свое поведение. Таким образом, вам нужно знать наиболее часто используемое промежуточное ПО, и вам нужно знать, как его использовать. Так почему бы не взять <a href="https://github.com/azat-co/cheatsheets/tree/master/express4">мой Express лист</a>. У меня есть основные модули промежуточного программного обеспечения. Например, <strong>npm i compression -S</strong> даст снижение скорости загрузки путем деления ответов. <strong>Logger (&#39;tiny&#39;)</strong> или<strong> logger (&#39;common&#39;)</strong> будут предоставлять меньше журналов (dev) или более (prod) соответственно.</p>\r\n\r\n<h2><a id="scale-up" name="scale-up">Scale up</a></h2>\r\n\r\n<p>NodeJS отлично справляется с асинхронным процессом из-за его неблокирующего ввода-вывода, и он сохраняет этот асинхронный способ кодирования простым, потому что есть только один поток. Это возможность начать масштабирование на ранней стадии, возможно даже с первых строк кода. Есть основной модуль кластера, который позволит вам масштабироваться по вертикали без особых проблем. Тем не менее, еще лучше будет использовать такой инструмент, как pm2 или кластерный контроль StrongLoop.</p>\r\n\r\n<p>Например, вы можете начать с pm2:</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px"><code>npm i -g pm2</code></div>\r\n\r\n<p><code>Затем вы можете запустить четыре экземпляра одного и того же сервера:</code></p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px"><code>pm2 start server.js -i 4</code></div>\r\n\r\n<p><code>Для Docker, pm2 версии 2+ имеет pm2-докер. Таким образом, ваш Dockerfile может выглядеть следующим образом:</code></p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px"><code># ...<br />\r\nRUN npm install pm2 -g<br />\r\nCMD [&quot;pm2-docker&quot;, &quot;app.js&quot;]</code></div>\r\n\r\n<p>Официальный образ Alpine Linux pm2 находится в <a href="https://hub.docker.com/r/keymetrics/pm2-docker-alpine/">Docker Hub</a>.&nbsp;</p>\r\n\r\n<h2><a name="cache-req">Cache Requests</a></h2>\r\n\r\n<p>Это лучшая практика DevOps, которая позволит вам получать больше соков из экземпляров Node (вы получаете больше одного с pm2 или подобным, см. Выше). Способ сделать это - позволить серверам Node делать такие вещи, как делать запросы, обрабатывать данные и выполнять бизнес-логику, а также разгружать трафик на статические файлы на другой веб-сервер, такой как Apache httpd или Nginx. Опять же, вы, вероятно, должны использовать Docker для настройки:</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">FROM nginx<br />\r\nCOPY nginx.conf /etc/nginx/nginx.conf</div>\r\n\r\n<p>Мне нравится использовать Docker для создания нескольких контейнеров (nginx, Node, Redis, MongoDB), работающих друг с другом. Например:</p>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px"><code>web:<br />\r\n&nbsp; build: ./app<br />\r\n&nbsp; volumes:<br />\r\n&nbsp;&nbsp;&nbsp; - &quot;./app:/src/app&quot;<br />\r\n&nbsp; ports:<br />\r\n&nbsp;&nbsp;&nbsp; - &quot;3030:3000&quot;<br />\r\n&nbsp; links:<br />\r\n&nbsp;&nbsp;&nbsp; - &quot;db:redis&quot;<br />\r\n&nbsp; command: pm2-docker app/server.js</code></div>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">nginx:<br />\r\n&nbsp; restart: always<br />\r\n&nbsp; build: ./nginx/<br />\r\n&nbsp; ports:<br />\r\n&nbsp;&nbsp;&nbsp; - &quot;80:80&quot;<br />\r\n&nbsp; volumes:<br />\r\n&nbsp;&nbsp;&nbsp; - /www/public<br />\r\n&nbsp; volumes_from:<br />\r\n&nbsp;&nbsp;&nbsp; - web<br />\r\n&nbsp; links:<br />\r\n&nbsp;&nbsp;&nbsp; - web:web</div>\r\n\r\n<div style="background:#eeeeee; border:1px solid #cccccc; padding:5px 10px">db:<br />\r\n&nbsp; image: redis</div>\r\n\r\n<h2>&nbsp;Summary</h2>\r\n\r\n<p>В этот день и век программного обеспечения с открытым исходным кодом нет оправданий, чтобы не учиться из проверенного и протестированного кода, который находится в&nbsp;открытом доступе. Вам не нужно находиться во внутреннем круге, чтобы войти. Обучение никогда не останавливается, и я уверен, что скоро у нас будут разные лучшие практики, основанные на неудачах и успехах, которые мы испытаем. Они гарантированы.</p>\r\n\r\n<p>Наконец, я хотел написать о том, как программное обеспечение питается миром и как JavaScript питается программным обеспечением ... есть отличные вещи, такие как ежегодные стандартные версии, множество модулей npm, инструменты и конференции ... но вместо этого я закончу словом осторожностью.</p>\r\n\r\n<p>Я вижу, как все больше и больше людей преследуют новую структуру или язык. Это синдром блестящих объектов. Каждую неделю они изучают новую библиотеку и новую структуру. Они навязчиво проверяют Twitter, Reddit, Hacker News и JS Weekly. Они используют подавляющий уровень активности в мире JavaScript для откладывания. У них есть пустые публичные истории GitHub.</p>\r\n\r\n<p>Изучать что-то новое - это хорошо, но не путать его с реальным материалом. Что важно, а что платит, ваша зарплата на самом деле строится. Остановитесь над разработкой. Вы не строите следующий Facebook. Обещания против генераторов против async await для меня являются спорными, потому что к тому моменту, когда кто-то ответил на поток в обсуждении, я уже написал обратный вызов (и использовал CoffeeScript, чтобы сделать это 2x быстрее, чем на простом ES5/6/7!).</p>\r\n\r\n<p>Конечная лучшая практика заключается в том, чтобы использовать лучшие методы, и лучшее из лучших - это овладеть основными принципами. Прочитайте исходный код, попробуйте новые вещи в коде и, самое главное, напишите тонны кода самостоятельно. Теперь, на этом этапе, прекратите читать и введите код корабля, который имеет значение!</p>\r\n\r\n<p>И на тот случай, если этот пост недостаточно, читайте больше о лучших практиках Node:</p>\r\n\r\n<ul>\r\n	<li><a href="https://blog.risingstack.com/nodejs-at-scale-npm-best-practices">https://blog.risingstack.com/nodejs-at-scale-npm-best-practices</a></li>\r\n	<li><a href="https://devcenter.heroku.com/articles/node-best-practices">https://devcenter.heroku.com/articles/node-best-practices</a></li>\r\n	<li><a href="https://blog.risingstack.com/node-js-best-practices">https://blog.risingstack.com/node-js-best-practices</a></li>\r\n	<li><a href="https://expressjs.com/en/advanced/best-practice-performance.html">https://expressjs.com/en/advanced/best-practice-performance.html</a></li>\r\n	<li><a href="https://www.codementor.io/nodejs/tutorial/nodejs-best-practices">https://www.codementor.io/nodejs/tutorial/nodejs-best-practices</a></li>\r\n</ul>\r\n', 1489560152, 'Best practices in NodeJS', 'best practices, nodejs, guru nodejs', 6, 0, 0);

--
-- Indexes for dumped tables
--

--
-- Indexes for table `bl_posts`
--
ALTER TABLE `bl_posts`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `bl_posts`
--
ALTER TABLE `bl_posts`
  MODIFY `id` int(10) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=12;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
